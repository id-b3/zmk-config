// SPDX-License-Identifier: MIT
#include <dt-bindings/zmk/matrix_transform.h>
#include <zephyr/dt-bindings/gpio/gpio.h>
#include <zephyr/dt-bindings/led/led.h>

/ {
    // --- Common nodes for both halves ---

    // KScan Definition (Rows defined here, Columns in overlays)
    // *** Replace XX with actual nice_nano P0.xx/P1.xx row pin numbers ***
    kscan0: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "row2col"; // Verify diode direction

        row-gpios
            = <&gpio0 18 (GPIO_ACTIVE_HIGH)> // Example: P0.18 - CHECK YOUR BOARD!
            , <&gpio0 5  (GPIO_ACTIVE_HIGH)> // Example: P0.05 - CHECK YOUR BOARD!
            , <&gpio0 4  (GPIO_ACTIVE_HIGH)> // Example: P0.04 - CHECK YOUR BOARD!
            , <&gpio0 9  (GPIO_ACTIVE_HIGH)> // Example: P0.09 - CHECK YOUR BOARD!
            ;
        // col-gpios are defined in the left/right overlays
    };

    // Matrix Transform (Defines full keyboard shape)
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <10>; // 5 columns per side
        rows = <4>;     // 4 rows defined above
        // Map logical key positions to physical row/column scan results
        // Verify this map matches your physical layout and keymap file expectations
        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)    RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)    RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)    RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
           RC(3,2) RC(3,3) RC(3,0)         RC(3,9) RC(3,6) RC(3,7) // Check thumb cluster RC values
        >;
    };

    // Encoder Definitions (Defined here, enabled in overlays)
    // *** Replace XX with actual nice_nano P0.xx/P1.xx encoder pin numbers ***
    left_encoder: encoder_left {
        compatible = "alps,ec11";
        label = "ENCODER_L"; // Use this label in keymap sensor bindings
        a-gpios = <&gpio0 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>; // Example: P0.19 - CHECK YOUR BOARD!
        b-gpios = <&gpio0 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>; // Example: P0.21 - CHECK YOUR BOARD!
        steps = <4>; // Pulses per detent (Common: 2 or 4)
        status = "disabled"; // Enabled via left overlay
    };

    right_encoder: encoder_right {
        compatible = "alps,ec11";
        label = "ENCODER_R"; // Use this label in keymap sensor bindings
        a-gpios = <&gpio0 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>; // Example: P0.21 - CHECK YOUR BOARD! (Pin relative to right nice_nano)
        b-gpios = <&gpio0 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>; // Example: P0.19 - CHECK YOUR BOARD! (Pin relative to right nice_nano)
        steps = <4>; // Pulses per detent
        status = "disabled"; // Enabled via right overlay
    };

    // Sensor Configuration (Links encoders to keymap bindings)
    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>; // Reference both encoders
        triggers-per-rotation = <20>; // Number of detents/clicks per 360 rotation - match your hardware
    };

    &pinctrl {
        spi3_default: spi3_default {
            group1 {
                psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
            };
        };

        spi3_sleep: spi3_sleep {
            group1 {
                psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
                low-power-enable;
            };
        };
    };

    &spi3 {
        compatible = "nordic,nrf-spim";
        status = "okay";

        pinctrl-0 = <&spi3_default>;
        pinctrl-1 = <&spi3_sleep>;
        pinctrl-names = "default", "sleep";

        led_strip: ws2812@0 {
            compatible = "worldsemi,ws2812-spi";

            /* SPI */
            reg = <0>; /* ignored, but necessary for SPI bindings */
            spi-max-frequency = <4000000>;

            /* WS2812 */
            chain-length = <10>; /* number of LEDs */
            spi-one-frame = <0x70>;
            spi-zero-frame = <0x40>;
            color-mapping = <LED_COLOR_ID_GREEN
                            LED_COLOR_ID_RED
                            LED_COLOR_ID_BLUE>;
        };
    };

    // Battery voltage measurement using VDDH
    vbatt: vbatt {
        compatible = "zmk,battery-nrf-vddh";
        label = "VBATT";
    };

    // Chosen nodes for ZMK firmware
    chosen {
        zmk,kscan = &kscan_0;             // Use the kscan node defined above
        zmk,matrix_transform = &default_transform; // Use the matrix transform defined above
        zmk,underglow = &led_strip;       // Use the SPI LED strip for underglow
        zmk,battery = &vbatt;             // Use the VDDH node for battery measurement
    };
};